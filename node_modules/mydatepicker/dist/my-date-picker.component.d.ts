/// <reference types="core-js" />
import { EventEmitter, OnChanges, SimpleChanges, ElementRef, Renderer } from "@angular/core";
import { IMyDate, IMyMonth, IMyOptions } from "./interfaces/index";
import { LocaleService } from "./services/my-date-picker.locale.service";
import { ValidatorService } from "./services/my-date-picker.validator.service";
export declare class MyDatePicker implements OnChanges {
    elem: ElementRef;
    private renderer;
    private localeService;
    private validatorService;
    options: any;
    locale: string;
    defaultMonth: string;
    selDate: string;
    dateChanged: EventEmitter<Object>;
    inputFieldChanged: EventEmitter<Object>;
    calendarViewChanged: EventEmitter<Object>;
    showSelector: boolean;
    visibleMonth: IMyMonth;
    selectedMonth: IMyMonth;
    selectedDate: IMyDate;
    weekDays: Array<string>;
    dates: Array<Object>;
    selectionDayTxt: string;
    invalidDate: boolean;
    dayIdx: number;
    today: Date;
    weekDayOpts: Array<string>;
    editMonth: boolean;
    invalidMonth: boolean;
    editYear: boolean;
    invalidYear: boolean;
    PREV_MONTH: number;
    CURR_MONTH: number;
    NEXT_MONTH: number;
    opts: IMyOptions;
    constructor(elem: ElementRef, renderer: Renderer, localeService: LocaleService, validatorService: ValidatorService);
    setLocaleOptions(): void;
    setOptions(): void;
    resetMonthYearEdit(): void;
    editMonthClicked(event: any): void;
    editYearClicked(event: any): void;
    userDateInput(event: any): void;
    userMonthInput(event: any): void;
    userYearInput(event: any): void;
    parseOptions(): void;
    ngOnChanges(changes: SimpleChanges): void;
    removeBtnClicked(): void;
    openBtnClicked(): void;
    setVisibleMonth(): void;
    prevMonth(): void;
    nextMonth(): void;
    prevYear(): void;
    nextYear(): void;
    todayClicked(): void;
    cellClicked(cell: any): void;
    selectDate(date: any): void;
    preZero(val: string): string;
    formatDate(val: any): string;
    monthText(m: number): string;
    monthStartIdx(y: number, m: number): number;
    daysInMonth(m: number, y: number): number;
    daysInPrevMonth(m: number, y: number): number;
    isCurrDay(d: number, m: number, y: number, cmo: any): boolean;
    getTimeInMilliseconds(date: IMyDate): number;
    getDayNumber(date: IMyDate): number;
    getWeekday(date: IMyDate): string;
    getDate(year: number, month: number, day: number): Date;
    sundayIdx(): number;
    generateCalendar(m: number, y: number): void;
    parseSelectedDate(ds: string): IMyDate;
    parseSelectedMonth(ms: string): IMyMonth;
}
